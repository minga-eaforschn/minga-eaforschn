# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"mutation root"
type mutation_root {
    "delete data from the table: \"owner\""
    delete_owner(
        "filter the rows which have to be deleted"
        where: owner_bool_exp!
    ): owner_mutation_response
    "delete single row from the table: \"owner\""
    delete_owner_by_pk(id: bigint!): owner
    "delete data from the table: \"pet\""
    delete_pet(
        "filter the rows which have to be deleted"
        where: pet_bool_exp!
    ): pet_mutation_response
    "delete single row from the table: \"pet\""
    delete_pet_by_pk(id: Int!): pet
    "insert data into the table: \"owner\""
    insert_owner(
        "the rows to be inserted"
        objects: [owner_insert_input!]!,
        "upsert condition"
        on_conflict: owner_on_conflict
    ): owner_mutation_response
    "insert a single row into the table: \"owner\""
    insert_owner_one(
        "the row to be inserted"
        object: owner_insert_input!,
        "upsert condition"
        on_conflict: owner_on_conflict
    ): owner
    "insert data into the table: \"pet\""
    insert_pet(
        "the rows to be inserted"
        objects: [pet_insert_input!]!,
        "upsert condition"
        on_conflict: pet_on_conflict
    ): pet_mutation_response
    "insert a single row into the table: \"pet\""
    insert_pet_one(
        "the row to be inserted"
        object: pet_insert_input!,
        "upsert condition"
        on_conflict: pet_on_conflict
    ): pet
    "update data of the table: \"owner\""
    update_owner(
        "increments the numeric columns with given value of the filtered values"
        _inc: owner_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: owner_set_input,
        "filter the rows which have to be updated"
        where: owner_bool_exp!
    ): owner_mutation_response
    "update single row of the table: \"owner\""
    update_owner_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: owner_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: owner_set_input,
        pk_columns: owner_pk_columns_input!
    ): owner
    "update multiples rows of table: \"owner\""
    update_owner_many(
        "updates to execute, in order"
        updates: [owner_updates!]!
    ): [owner_mutation_response]
    "update data of the table: \"pet\""
    update_pet(
        "increments the numeric columns with given value of the filtered values"
        _inc: pet_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: pet_set_input,
        "filter the rows which have to be updated"
        where: pet_bool_exp!
    ): pet_mutation_response
    "update single row of the table: \"pet\""
    update_pet_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: pet_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: pet_set_input,
        pk_columns: pet_pk_columns_input!
    ): pet
    "update multiples rows of table: \"pet\""
    update_pet_many(
        "updates to execute, in order"
        updates: [pet_updates!]!
    ): [pet_mutation_response]
}

"columns and relationships of \"owner\""
type owner {
    country: String
    created_at: timestamptz
    id: bigint!
    name: String
    "An array relationship"
    pets(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): [pet!]!
    "An aggregate relationship"
    pets_aggregate(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): pet_aggregate!
}

"aggregated selection of \"owner\""
type owner_aggregate {
    aggregate: owner_aggregate_fields
    nodes: [owner!]!
}

"aggregate fields of \"owner\""
type owner_aggregate_fields {
    avg: owner_avg_fields
    count(columns: [owner_select_column!], distinct: Boolean): Int!
    max: owner_max_fields
    min: owner_min_fields
    stddev: owner_stddev_fields
    stddev_pop: owner_stddev_pop_fields
    stddev_samp: owner_stddev_samp_fields
    sum: owner_sum_fields
    var_pop: owner_var_pop_fields
    var_samp: owner_var_samp_fields
    variance: owner_variance_fields
}

"aggregate avg on columns"
type owner_avg_fields {
    id: Float
}

"aggregate max on columns"
type owner_max_fields {
    country: String
    created_at: timestamptz
    id: bigint
    name: String
}

"aggregate min on columns"
type owner_min_fields {
    country: String
    created_at: timestamptz
    id: bigint
    name: String
}

"response of any mutation on the table \"owner\""
type owner_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [owner!]!
}

"aggregate stddev on columns"
type owner_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type owner_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type owner_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type owner_sum_fields {
    id: bigint
}

"aggregate var_pop on columns"
type owner_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type owner_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type owner_variance_fields {
    id: Float
}

"columns and relationships of \"pet\""
type pet {
    created_at: timestamptz!
    id: Int!
    name: String!
    "An object relationship"
    owner: owner!
    owner_id: Int!
    type: String!
}

"aggregated selection of \"pet\""
type pet_aggregate {
    aggregate: pet_aggregate_fields
    nodes: [pet!]!
}

"aggregate fields of \"pet\""
type pet_aggregate_fields {
    avg: pet_avg_fields
    count(columns: [pet_select_column!], distinct: Boolean): Int!
    max: pet_max_fields
    min: pet_min_fields
    stddev: pet_stddev_fields
    stddev_pop: pet_stddev_pop_fields
    stddev_samp: pet_stddev_samp_fields
    sum: pet_sum_fields
    var_pop: pet_var_pop_fields
    var_samp: pet_var_samp_fields
    variance: pet_variance_fields
}

"aggregate avg on columns"
type pet_avg_fields {
    id: Float
    owner_id: Float
}

"aggregate max on columns"
type pet_max_fields {
    created_at: timestamptz
    id: Int
    name: String
    owner_id: Int
    type: String
}

"aggregate min on columns"
type pet_min_fields {
    created_at: timestamptz
    id: Int
    name: String
    owner_id: Int
    type: String
}

"response of any mutation on the table \"pet\""
type pet_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [pet!]!
}

"aggregate stddev on columns"
type pet_stddev_fields {
    id: Float
    owner_id: Float
}

"aggregate stddev_pop on columns"
type pet_stddev_pop_fields {
    id: Float
    owner_id: Float
}

"aggregate stddev_samp on columns"
type pet_stddev_samp_fields {
    id: Float
    owner_id: Float
}

"aggregate sum on columns"
type pet_sum_fields {
    id: Int
    owner_id: Int
}

"aggregate var_pop on columns"
type pet_var_pop_fields {
    id: Float
    owner_id: Float
}

"aggregate var_samp on columns"
type pet_var_samp_fields {
    id: Float
    owner_id: Float
}

"aggregate variance on columns"
type pet_variance_fields {
    id: Float
    owner_id: Float
}

type query_root {
    "fetch data from the table: \"owner\""
    owner(
        "distinct select on columns"
        distinct_on: [owner_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [owner_order_by!],
        "filter the rows returned"
        where: owner_bool_exp
    ): [owner!]!
    "fetch aggregated fields from the table: \"owner\""
    owner_aggregate(
        "distinct select on columns"
        distinct_on: [owner_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [owner_order_by!],
        "filter the rows returned"
        where: owner_bool_exp
    ): owner_aggregate!
    "fetch data from the table: \"owner\" using primary key columns"
    owner_by_pk(id: bigint!): owner
    "fetch data from the table: \"pet\""
    pet(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): [pet!]!
    "fetch aggregated fields from the table: \"pet\""
    pet_aggregate(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): pet_aggregate!
    "fetch data from the table: \"pet\" using primary key columns"
    pet_by_pk(id: Int!): pet
}

type subscription_root {
    "fetch data from the table: \"owner\""
    owner(
        "distinct select on columns"
        distinct_on: [owner_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [owner_order_by!],
        "filter the rows returned"
        where: owner_bool_exp
    ): [owner!]!
    "fetch aggregated fields from the table: \"owner\""
    owner_aggregate(
        "distinct select on columns"
        distinct_on: [owner_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [owner_order_by!],
        "filter the rows returned"
        where: owner_bool_exp
    ): owner_aggregate!
    "fetch data from the table: \"owner\" using primary key columns"
    owner_by_pk(id: bigint!): owner
    "fetch data from the table in a streaming manner: \"owner\""
    owner_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [owner_stream_cursor_input]!,
        "filter the rows returned"
        where: owner_bool_exp
    ): [owner!]!
    "fetch data from the table: \"pet\""
    pet(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): [pet!]!
    "fetch aggregated fields from the table: \"pet\""
    pet_aggregate(
        "distinct select on columns"
        distinct_on: [pet_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [pet_order_by!],
        "filter the rows returned"
        where: pet_bool_exp
    ): pet_aggregate!
    "fetch data from the table: \"pet\" using primary key columns"
    pet_by_pk(id: Int!): pet
    "fetch data from the table in a streaming manner: \"pet\""
    pet_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [pet_stream_cursor_input]!,
        "filter the rows returned"
        where: pet_bool_exp
    ): [pet!]!
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"owner\""
enum owner_constraint {
    "unique or primary key constraint on columns \"id\""
    owner_pkey
}

"select columns of table \"owner\""
enum owner_select_column {
    "column name"
    country
    "column name"
    created_at
    "column name"
    id
    "column name"
    name
}

"update columns of table \"owner\""
enum owner_update_column {
    "column name"
    country
    "column name"
    created_at
    "column name"
    id
    "column name"
    name
}

"unique or primary key constraints on table \"pet\""
enum pet_constraint {
    "unique or primary key constraint on columns \"id\""
    pet_pkey
}

"select columns of table \"pet\""
enum pet_select_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    name
    "column name"
    owner_id
    "column name"
    type
}

"update columns of table \"pet\""
enum pet_update_column {
    "column name"
    created_at
    "column name"
    id
    "column name"
    name
    "column name"
    owner_id
    "column name"
    type
}

scalar bigint

scalar timestamptz

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"Boolean expression to filter rows from the table \"owner\". All fields are combined with a logical 'AND'."
input owner_bool_exp {
    _and: [owner_bool_exp!]
    _not: owner_bool_exp
    _or: [owner_bool_exp!]
    country: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: bigint_comparison_exp
    name: String_comparison_exp
    pets: pet_bool_exp
    pets_aggregate: pet_aggregate_bool_exp
}

"input type for incrementing numeric columns in table \"owner\""
input owner_inc_input {
    id: bigint
}

"input type for inserting data into table \"owner\""
input owner_insert_input {
    country: String
    created_at: timestamptz
    id: bigint
    name: String
    pets: pet_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"owner\""
input owner_obj_rel_insert_input {
    data: owner_insert_input!
    "upsert condition"
    on_conflict: owner_on_conflict
}

"on_conflict condition type for table \"owner\""
input owner_on_conflict {
    constraint: owner_constraint!
    update_columns: [owner_update_column!]! = []
    where: owner_bool_exp
}

"Ordering options when selecting data from \"owner\"."
input owner_order_by {
    country: order_by
    created_at: order_by
    id: order_by
    name: order_by
    pets_aggregate: pet_aggregate_order_by
}

"primary key columns input for table: owner"
input owner_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"owner\""
input owner_set_input {
    country: String
    created_at: timestamptz
    id: bigint
    name: String
}

"Streaming cursor of the table \"owner\""
input owner_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: owner_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input owner_stream_cursor_value_input {
    country: String
    created_at: timestamptz
    id: bigint
    name: String
}

input owner_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: owner_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: owner_set_input
    where: owner_bool_exp!
}

input pet_aggregate_bool_exp {
    count: pet_aggregate_bool_exp_count
}

input pet_aggregate_bool_exp_count {
    arguments: [pet_select_column!]
    distinct: Boolean
    filter: pet_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"pet\""
input pet_aggregate_order_by {
    avg: pet_avg_order_by
    count: order_by
    max: pet_max_order_by
    min: pet_min_order_by
    stddev: pet_stddev_order_by
    stddev_pop: pet_stddev_pop_order_by
    stddev_samp: pet_stddev_samp_order_by
    sum: pet_sum_order_by
    var_pop: pet_var_pop_order_by
    var_samp: pet_var_samp_order_by
    variance: pet_variance_order_by
}

"input type for inserting array relation for remote table \"pet\""
input pet_arr_rel_insert_input {
    data: [pet_insert_input!]!
    "upsert condition"
    on_conflict: pet_on_conflict
}

"order by avg() on columns of table \"pet\""
input pet_avg_order_by {
    id: order_by
    owner_id: order_by
}

"Boolean expression to filter rows from the table \"pet\". All fields are combined with a logical 'AND'."
input pet_bool_exp {
    _and: [pet_bool_exp!]
    _not: pet_bool_exp
    _or: [pet_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: Int_comparison_exp
    name: String_comparison_exp
    owner: owner_bool_exp
    owner_id: Int_comparison_exp
    type: String_comparison_exp
}

"input type for incrementing numeric columns in table \"pet\""
input pet_inc_input {
    id: Int
    owner_id: Int
}

"input type for inserting data into table \"pet\""
input pet_insert_input {
    created_at: timestamptz
    id: Int
    name: String
    owner: owner_obj_rel_insert_input
    owner_id: Int
    type: String
}

"order by max() on columns of table \"pet\""
input pet_max_order_by {
    created_at: order_by
    id: order_by
    name: order_by
    owner_id: order_by
    type: order_by
}

"order by min() on columns of table \"pet\""
input pet_min_order_by {
    created_at: order_by
    id: order_by
    name: order_by
    owner_id: order_by
    type: order_by
}

"on_conflict condition type for table \"pet\""
input pet_on_conflict {
    constraint: pet_constraint!
    update_columns: [pet_update_column!]! = []
    where: pet_bool_exp
}

"Ordering options when selecting data from \"pet\"."
input pet_order_by {
    created_at: order_by
    id: order_by
    name: order_by
    owner: owner_order_by
    owner_id: order_by
    type: order_by
}

"primary key columns input for table: pet"
input pet_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"pet\""
input pet_set_input {
    created_at: timestamptz
    id: Int
    name: String
    owner_id: Int
    type: String
}

"order by stddev() on columns of table \"pet\""
input pet_stddev_order_by {
    id: order_by
    owner_id: order_by
}

"order by stddev_pop() on columns of table \"pet\""
input pet_stddev_pop_order_by {
    id: order_by
    owner_id: order_by
}

"order by stddev_samp() on columns of table \"pet\""
input pet_stddev_samp_order_by {
    id: order_by
    owner_id: order_by
}

"Streaming cursor of the table \"pet\""
input pet_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: pet_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input pet_stream_cursor_value_input {
    created_at: timestamptz
    id: Int
    name: String
    owner_id: Int
    type: String
}

"order by sum() on columns of table \"pet\""
input pet_sum_order_by {
    id: order_by
    owner_id: order_by
}

input pet_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: pet_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: pet_set_input
    where: pet_bool_exp!
}

"order by var_pop() on columns of table \"pet\""
input pet_var_pop_order_by {
    id: order_by
    owner_id: order_by
}

"order by var_samp() on columns of table \"pet\""
input pet_var_samp_order_by {
    id: order_by
    owner_id: order_by
}

"order by variance() on columns of table \"pet\""
input pet_variance_order_by {
    id: order_by
    owner_id: order_by
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}
